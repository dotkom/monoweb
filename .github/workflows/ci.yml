# The main development/staging integration pipeline
#
# It is responsible for verifying linting, type checking, and building packages
# in the entire monorepo.
#
# It will also deploy the applications to their staging environments if all
# checks pass AND the pipeline is triggered by a push to the main branch.

name: Integration Pipeline (staging)
on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize

# Determine if staging should be deployed based on the event that triggered the
# pipeline. We only want to deploy staging when a push to the main branch occurs.
env:
  GH_IS_DEPLOYING_STAGING: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

permissions:
  id-token: write   
  contents: read
jobs:
  # The "check" job is responsible for verifying the minimum requirements to
  # build all the packages in the monorepo.
  check:
    name: Verify build requirements
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-
      - uses: pnpm/action-setup@v2
        with:
          version: 9.15.5
      - uses: actions/setup-node@v4
        with:
          node-version: 22.14.0
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
        name: Install dependencies from pnpm lockfile
      - run: pnpm lint-check
        name: Run linting and formatting checks
      - run: pnpm type-check
        name: Run TypeScript type checker

  # Job for building and optionally deploying the apps/web application
  deploy-web:
    name: Deploy monoweb/web
    runs-on: ubuntu-24.04
    needs:
      - check
    steps:
      - name: Install local GitHub Actions
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          sparse-checkout: '.github'
          sparse-checkout-cone-mode: 'true'
      - uses: ./.github/actions/acquire-secrets
        id: acquire-secrets
        with:
          project: monoweb-web
          config: staging
      - uses: ./.github/actions/build-web
        id: build
        with:
          aws-region: 'eu-north-1'
          aws-iam-role: arn:aws:iam::891459268445:role/MonowebStagingWebCIRole
          aws-ecr-repository: 891459268445.dkr.ecr.eu-north-1.amazonaws.com/monoweb/staging/web
          git-hash: ${{ github.sha }}
          build-arguments: |
            OAUTH_CLIENT_ID=${{ steps.acquire-secrets.outputs.BUILD_ARG_OAUTH_CLIENT_ID }}
            OAUTH_CLIENT_SECRET=${{ steps.acquire-secrets.outputs.BUILD_ARG_OAUTH_CLIENT_SECRET }}
            OAUTH_ISSUER=${{ steps.acquire-secrets.outputs.BUILD_ARG_OAUTH_ISSUER }}
            AUTH_SECRET=${{ steps.acquire-secrets.outputs.BUILD_ARG_AUTH_SECRET }}
            NEXT_PUBLIC_ORIGIN=${{ steps.acquire-secrets.outputs.BUILD_ARG_NEXT_PUBLIC_ORIGIN }}
            NEXT_PUBLIC_RPC_HOST=${{ steps.acquire-secrets.outputs.BUILD_ARG_NEXT_PUBLIC_RPC_HOST }}
            RPC_HOST=${{ steps.acquire-secrets.outputs.BUILD_ARG_RPC_HOST }}
            SIGNING_KEY=${{ steps.acquire-secrets.outputs.BUILD_ARG_SIGNING_KEY }}
      - uses: ./.github/actions/aws-ecs-deploy
        id: deploy
        with:
          aws-region: 'eu-north-1'
          aws-iam-role: arn:aws:iam::891459268445:role/MonowebStagingWebCIRole
          aws-task-definition-arn: arn:aws:ecs:eu-north-1:891459268445:task-definition/monoweb-staging-web
          cluster-name: evergreen-prod-cluster
          service-name: monoweb-staging-web
          container-name: monoweb-staging-web
          image: ${{ steps.build.outputs.image }}
