# The main development/staging integration pipeline
#
# It is responsible for verifying linting, type checking, and building packages
# in the entire monorepo.
#
# It will also deploy the applications to their staging environments if all
# checks pass AND the pipeline is triggered by a push to the main branch.

name: Integration Pipeline (staging)
on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize

# Determine if staging should be deployed based on the event that triggered the
# pipeline. We only want to deploy staging when a push to the main branch occurs.
env:
  GH_IS_DEPLOYING_STAGING: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

permissions:
  id-token: write   
  contents: read
jobs:
  # The "check" job is responsible for verifying the minimum requirements to
  # build all the packages in the monorepo.
  check:
    name: Verify build requirements
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-
      - uses: pnpm/action-setup@v2
        with:
          version: 9.15.5
      - uses: actions/setup-node@v4
        with:
          node-version: 22.14.0
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
        name: Install dependencies from pnpm lockfile
      - run: pnpm lint-check
        name: Run linting and formatting checks
      - run: pnpm type-check
        name: Run TypeScript type checker

  # Job for building and optionally deploying the apps/web application
  deploy-web:
    name: Deploy monoweb/web
    runs-on: ubuntu-24.04
    needs:
      - check
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      # Web requires build-time secrets from Doppler
      - uses: actions/github-script@v7
        id: get-oidc-token
        with:
          script: core.setOutput('oidc_token', await core.getIDToken())
      - uses: dopplerhq/cli-action@v3
      # Identity comes from the configured doppler account identity
      # (see last step https://docs.doppler.com/docs/service-account-identities#configure-the-identity)
      - run: |
          doppler oidc login \
            --api-host https://api.doppler.com \
            --scope=. \
            --identity=8f25d2a1-28b9-4f2a-8fb3-115b10f456b2 \
            --token=${{ steps.get-oidc-token.outputs.oidc_token }}
      - run: doppler setup -p monoweb-web -c staging
      # Configure build arguments
      - run: |
          OAUTH_CLIENT_ID=$(doppler secrets get OAUTH_CLIENT_ID --json | jq -r '.OAUTH_CLIENT_ID.computed')
          OAUTH_CLIENT_SECRET=$(doppler secrets get OAUTH_CLIENT_SECRET --json | jq -r '.OAUTH_CLIENT_SECRET.computed')
          OAUTH_ISSUER=$(doppler secrets get OAUTH_ISSUER --json | jq -r '.OAUTH_ISSUER.computed')
          AUTH_SECRET=$(doppler secrets get AUTH_SECRET --json | jq -r '.AUTH_SECRET.computed')
          NEXT_PUBLIC_ORIGIN=$(doppler secrets get NEXT_PUBLIC_ORIGIN --json | jq -r '.NEXT_PUBLIC_ORIGIN.computed')
          NEXT_PUBLIC_RPC_HOST=$(doppler secrets get NEXT_PUBLIC_RPC_HOST --json | jq -r '.NEXT_PUBLIC_RPC_HOST.computed')
          RPC_HOST=$(doppler secrets get RPC_HOST --json | jq -r '.RPC_HOST.computed')
          SIGNING_KEY=$(doppler secrets get SIGNING_KEY --json | jq -r '.SIGNING_KEY.computed')

          echo "::add-mask::$OAUTH_CLIENT_ID"
          echo "::add-mask::$OAUTH_CLIENT_SECRET"
          echo "::add-mask::$OAUTH_ISSUER"
          echo "::add-mask::$AUTH_SECRET"
          echo "::add-mask::$NEXT_PUBLIC_ORIGIN"
          echo "::add-mask::$NEXT_PUBLIC_RPC_HOST"
          echo "::add-mask::$RPC_HOST"
          echo "::add-mask::$SIGNING_KEY"

          echo BUILD_ARG_OAUTH_CLIENT_ID="$OAUTH_CLIENT_ID" >> $GITHUB_OUTPUT
          echo BUILD_ARG_OAUTH_CLIENT_SECRET="$OAUTH_CLIENT_SECRET" >> $GITHUB_OUTPUT
          echo BUILD_ARG_OAUTH_ISSUER="$OAUTH_ISSUER" >> $GITHUB_OUTPUT
          echo BUILD_ARG_AUTH_SECRET="$AUTH_SECRET" >> $GITHUB_OUTPUT
          echo BUILD_ARG_NEXT_PUBLIC_ORIGIN="$NEXT_PUBLIC_ORIGIN" >> $GITHUB_OUTPUT
          echo BUILD_ARG_NEXT_PUBLIC_RPC_HOST="$NEXT_PUBLIC_RPC_HOST" >> $GITHUB_OUTPUT
          echo BUILD_ARG_RPC_HOST="$RPC_HOST" >> $GITHUB_OUTPUT
          echo BUILD_ARG_SIGNING_KEY="$SIGNING_KEY" >> $GITHUB_OUTPUT
        id: set-build-args
      - uses: ./.github/actions/build-web
        with:
          git-hash: ${{ github.sha }}
          iam-role: arn:aws:iam::891459268445:role/MonowebStagingWebCIRole
          repository: 891459268445.dkr.ecr.eu-north-1.amazonaws.com/monoweb/staging/web
          build-arguments: |
            OAUTH_CLIENT_ID=${{ steps.set-build-args.outputs.BUILD_ARG_OAUTH_CLIENT_ID }}
            OAUTH_CLIENT_SECRET=${{ steps.set-build-args.outputs.BUILD_ARG_OAUTH_CLIENT_SECRET }}
            OAUTH_ISSUER=${{ steps.set-build-args.outputs.BUILD_ARG_OAUTH_ISSUER }}
            AUTH_SECRET=${{ steps.set-build-args.outputs.BUILD_ARG_AUTH_SECRET }}
            NEXT_PUBLIC_ORIGIN=${{ steps.set-build-args.outputs.BUILD_ARG_NEXT_PUBLIC_ORIGIN }}
            NEXT_PUBLIC_RPC_HOST=${{ steps.set-build-args.outputs.BUILD_ARG_NEXT_PUBLIC_RPC_HOST }}
            RPC_HOST=${{ steps.set-build-args.outputs.BUILD_ARG_RPC_HOST }}
            SIGNING_KEY=${{ steps.set-build-args.outputs.BUILD_ARG_SIGNING_KEY }}
      - uses: actions/github-script@v7
        if: env.GH_IS_DEPLOYING_STAGING
        with:
          github-token: ${{ secrets.TERRAFORM_WORKFLOW_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'dotkom',
              repo: 'terraform-monorepo',
              workflow_id: 'apply.yml',
              ref: 'main',
              inputs: {
                environment: 'staging',
                project: 'monoweb-web',
                targets: 'module.web_evergreen_service',
              },
            });
