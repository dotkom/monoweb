generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/schemas"

  useMultipleFiles = false
  createInputTypes = false
  addIncludeType   = false
  addSelectType    = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MembershipType {
  BACHELOR_STUDENT @map("BACHELOR_STUDENT")
  MASTER_STUDENT   @map("MASTER_STUDENT")
  PHD_STUDENT      @map("PHD_STUDENT")
  KNIGHT           @map("KNIGHT")
  SOCIAL_MEMBER    @map("SOCIAL_MEMBER")
  OTHER            @map("OTHER")

  @@map("membership_type")
}

/// Taken from the Feide API. The values were found by digging around in our Auth0 user profiles.
///
/// We have an additional value `UNKNOWN` to represent users that do not have a specialization or if some new value is
/// suddenly added to the Feide API that we do not yet know about.
enum MembershipSpecialization {
  ARTIFICIAL_INTELLIGENCE @map("ARTIFICIAL_INTELLIGENCE")
  DATABASE_AND_SEARCH     @map("DATABASE_AND_SEARCH")
  INTERACTION_DESIGN      @map("INTERACTION_DESIGN")
  SOFTWARE_ENGINEERING    @map("SOFTWARE_ENGINEERING")
  UNKNOWN                 @map("UNKNOWN")

  @@map("membership_specialization")
}

model Membership {
  id             String                    @id @default(uuid())
  userId         String
  user           User                      @relation(fields: [userId], references: [id])
  type           MembershipType
  specialization MembershipSpecialization? @default(UNKNOWN)
  start          DateTime                  @db.Timestamptz(3)
  end            DateTime                  @db.Timestamptz(3)

  @@map("membership")
}

model User {
  /// OpenID Connect Subject claim - for this reason there is no @default(uuid()) here.
  id                  String   @id
  profileSlug         String   @unique
  name                String?
  email               String?
  imageUrl            String?
  biography           String?
  phone               String?
  gender              String?
  dietaryRestrictions String?
  ntnuUsername        String?
  flags               String[]
  /// Used for identifying the user in Google Workspace (my.name@online.ntnu.no)
  workspaceUserId     String?  @unique

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  privacyPermissionsId String?             @unique
  privacyPermissions   PrivacyPermissions?

  notificationPermissionsId String?                  @unique
  notificationPermissions   NotificationPermissions?

  attendee          Attendee[]
  personalMark      PersonalMark[]
  groupMemberships  GroupMembership[]
  memberships       Membership[]
  givenMarks        PersonalMark[]    @relation("GivenBy")
  attendeesRefunded Attendee[]        @relation(name: "RefundedBy")

  @@map("ow_user")
}

model Company {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  phone       String?
  email       String?
  website     String
  location    String?
  imageUrl    String?
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  events     EventCompany[]
  JobListing JobListing[]

  @@map("company")
}

enum GroupType {
  COMMITTEE      @map("COMMITTEE")
  NODE_COMMITTEE @map("NODE_COMMITTEE")
  ASSOCIATED     @map("ASSOCIATED")
  INTEREST_GROUP @map("INTEREST_GROUP")

  @@map("group_type")
}

model Group {
  slug             String    @id @unique
  abbreviation     String
  name             String?
  shortDescription String?
  description      String
  imageUrl         String?
  email            String?
  contactUrl       String?
  createdAt        DateTime  @default(now()) @db.Timestamptz(3)
  deactivatedAt    DateTime?
  workspaceGroupId String?   @unique

  events      EventHostingGroup[]
  type        GroupType
  memberships GroupMembership[]
  marks       MarkGroup[]
  roles       GroupRole[]

  @@map("group")
}

model GroupMembership {
  id        String    @id @default(uuid())
  groupId   String
  group     Group     @relation(fields: [groupId], references: [slug], onDelete: Cascade)
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  start     DateTime  @db.Timestamptz(3)
  end       DateTime? @db.Timestamptz(3)
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamptz(3)

  roles GroupMembershipRole[]

  @@map("group_membership")
}

model GroupMembershipRole {
  membershipId String
  membership   GroupMembership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  roleId       String
  role         GroupRole       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([membershipId, roleId])
  @@map("group_membership_role")
}

enum GroupRoleType {
  LEADER        @map("LEADER")
  PUNISHER      @map("PUNISHER")
  TREASURER     @map("TREASURER")
  COSMETIC      @map("COSMETIC")
  DEPUTY_LEADER @map("DEPUTY_LEADER")
  TRUSTEE       @map("TRUSTEE")
  EMAIL_ONLY    @map("EMAIL_ONLY")

  @@map("group_role_type")
}

model GroupRole {
  id      String        @id @default(uuid())
  groupId String
  group   Group         @relation(fields: [groupId], references: [slug], onDelete: Cascade)
  name    String
  type    GroupRoleType @default(COSMETIC)

  groupMembershipRoles GroupMembershipRole[]

  @@unique([groupId, name])
  @@map("group_role")
}

enum EventStatus {
  DRAFT   @map("DRAFT")
  PUBLIC  @map("PUBLIC")
  DELETED @map("DELETED")

  @@map("event_status")
}

enum EventType {
  SOCIAL           @map("SOCIAL")
  ACADEMIC         @map("ACADEMIC")
  COMPANY          @map("COMPANY")
  // This is called "Generalforsamling" in Norwegian and happens twice a year.
  GENERAL_ASSEMBLY @map("GENERAL_ASSEMBLY")
  INTERNAL         @map("INTERNAL")
  OTHER            @map("OTHER")
  WELCOME          @map("WELCOME")

  @@map("event_type")
}

model Attendance {
  id                 String   @id @default(uuid())
  registerStart      DateTime @db.Timestamptz(3)
  registerEnd        DateTime @db.Timestamptz(3)
  deregisterDeadline DateTime @db.Timestamptz(3)
  selections         Json     @default("[]")
  createdAt          DateTime @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  attendancePrice Int?

  pools     AttendancePool[]
  attendees Attendee[]
  events    Event[]

  @@map("attendance")
}

model AttendancePool {
  id              String     @id @default(uuid())
  attendanceId    String
  attendance      Attendance @relation(fields: [attendanceId], references: [id])
  title           String
  mergeDelayHours Int?
  yearCriteria    Json
  capacity        Int
  createdAt       DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime   @default(now()) @updatedAt @db.Timestamptz(3)

  attendees Attendee[]

  @@map("attendance_pool")
}

model Attendee {
  id                    String              @id @default(uuid())
  attendance            Attendance          @relation(fields: [attendanceId], references: [id])
  attendanceId          String
  user                  User                @relation(fields: [userId], references: [id])
  userId                String
  /// To preserve the user's grade at the time of registration
  userGrade             Int?
  attendancePool        AttendancePool      @relation(fields: [attendancePoolId], references: [id])
  attendancePoolId      String
  feedbackFormAnswer    FeedbackFormAnswer?
  /// Which options the user has selected from the Attendance selections
  selections            Json                @default("[]")
  reserved              Boolean
  earliestReservationAt DateTime            @db.Timestamptz(3)
  attendedAt            DateTime?           @db.Timestamptz(3)
  createdAt             DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt             DateTime            @default(now()) @updatedAt @db.Timestamptz(3)

  paymentDeadline       DateTime?
  paymentLink           String?
  paymentId             String?
  paymentReservedAt     DateTime?
  paymentChargeDeadline DateTime?
  paymentChargedAt      DateTime?
  paymentRefundedAt     DateTime?
  paymentRefundedById   String?
  paymentRefundedBy     User?     @relation(fields: [paymentRefundedById], references: [id], name: "RefundedBy")

  @@unique([attendanceId, userId], name: "attendee_unique")
  @@map("attendee")
}

model Event {
  id               String        @id @default(uuid())
  title            String
  start            DateTime      @db.Timestamptz(3)
  end              DateTime      @db.Timestamptz(3)
  status           EventStatus
  description      String
  shortDescription String?
  imageUrl         String?
  locationTitle    String?
  locationAddress  String?
  locationLink     String?
  attendance       Attendance?   @relation(fields: [attendanceId], references: [id])
  attendanceId     String?
  type             EventType
  feedbackForm     FeedbackForm?
  createdAt        DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime      @default(now()) @updatedAt @db.Timestamptz(3)

  parentId String?
  parent   Event?  @relation("children", fields: [parentId], references: [id], map: "event_parent_fkey")
  children Event[] @relation("children")

  companies     EventCompany[]
  hostingGroups EventHostingGroup[]

  metadataImportId Int?

  @@map("event")
}

model EventCompany {
  eventId   String
  companyId String
  event     Event   @relation(fields: [eventId], references: [id])
  company   Company @relation(fields: [companyId], references: [id])

  @@id([eventId, companyId])
  @@map("event_company")
}

enum MarkType {
  MANUAL
  LATE_ATTENDANCE
  MISSED_ATTENDANCE
  MISSING_FEEDBACK
  MISSING_PAYMENT
}

model Mark {
  id       String   @id @default(uuid())
  title    String
  details  String?
  /// Duration in days
  duration Int
  weight   Int
  type     MarkType @default(MANUAL)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  users  PersonalMark[]
  groups MarkGroup[]

  @@map("mark")
}

model MarkGroup {
  markId  String
  groupId String
  mark    Mark   @relation(fields: [markId], references: [id])
  group   Group  @relation(fields: [groupId], references: [slug])

  @@id([markId, groupId])
  @@map("mark_group")
}

model PersonalMark {
  mark   Mark   @relation(fields: [markId], references: [id])
  markId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  givenBy   User?   @relation("GivenBy", fields: [givenById], references: [id])
  givenById String?

  createdAt DateTime @default(now()) @db.Timestamptz(3)

  @@id([markId, userId])
  @@map("personal_mark")
}

model PrivacyPermissions {
  id                String   @id @default(uuid())
  user              User     @relation(fields: [userId], references: [id])
  userId            String   @unique
  profileVisible    Boolean  @default(true)
  usernameVisible   Boolean  @default(true)
  emailVisible      Boolean  @default(false)
  phoneVisible      Boolean  @default(false)
  addressVisible    Boolean  @default(false)
  attendanceVisible Boolean  @default(false)
  createdAt         DateTime @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  @@map("privacy_permissions")
}

model NotificationPermissions {
  id                          String   @id @default(uuid())
  user                        User     @relation(fields: [userId], references: [id])
  userId                      String   @unique
  applications                Boolean  @default(true)
  newArticles                 Boolean  @default(true)
  standardNotifications       Boolean  @default(true)
  groupMessages               Boolean  @default(true)
  markRulesUpdates            Boolean  @default(true)
  receipts                    Boolean  @default(true)
  registrationByAdministrator Boolean  @default(true)
  registrationStart           Boolean  @default(true)
  createdAt                   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt                   DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  @@map("notification_permissions")
}

model EventHostingGroup {
  groupId String
  eventId String
  group   Group  @relation(fields: [groupId], references: [slug])
  event   Event  @relation(fields: [eventId], references: [id])

  @@id([groupId, eventId])
  @@map("event_hosting_group")
}

enum EmploymentType {
  PARTTIME          @map("PARTTIME")
  FULLTIME          @map("FULLTIME")
  SUMMER_INTERNSHIP @map("SUMMER_INTERNSHIP")
  OTHER             @map("OTHER")

  @@map("employment_type")
}

model JobListing {
  id               String         @id @default(uuid())
  companyId        String
  company          Company        @relation(fields: [companyId], references: [id])
  title            String
  description      String
  shortDescription String?
  start            DateTime       @db.Timestamptz(3)
  end              DateTime       @db.Timestamptz(3)
  featured         Boolean
  hidden           Boolean
  deadline         DateTime?      @db.Timestamptz(3)
  employment       EmploymentType
  applicationLink  String?
  applicationEmail String?
  // TODO: Find a better name for this
  deadlineAsap     Boolean

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  locations JobListingLocation[]

  @@map("job_listing")
}

model JobListingLocation {
  name         String
  createdAt    DateTime   @default(now()) @db.Timestamptz(3)
  jobListing   JobListing @relation(fields: [jobListingId], references: [id])
  jobListingId String

  @@id([name, jobListingId])
  @@map("job_listing_location")
}

model Offline {
  id          String   @id @default(uuid())
  title       String
  fileUrl     String?
  imageUrl    String?
  publishedAt DateTime @db.Timestamptz(3)
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  @@map("offline")
}

model Article {
  id           String  @id @default(uuid())
  title        String
  author       String
  photographer String
  imageUrl     String
  slug         String  @unique
  excerpt      String
  content      String
  isFeatured   Boolean @default(false)
  vimeoId      String?

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  tags ArticleTagLink[]

  @@map("article")
}

model ArticleTag {
  name String @id

  articles ArticleTagLink[]

  @@map("article_tag")
}

model ArticleTagLink {
  article   Article    @relation(fields: [articleId], references: [id])
  articleId String
  tag       ArticleTag @relation(fields: [tagName], references: [name])
  tagName   String

  @@id([articleId, tagName])
  @@map("article_tag_link")
}

enum TaskType {
  RESERVE_ATTENDEE         @map("RESERVE_ATTENDEE")
  CHARGE_ATTENDEE          @map("CHARGE_ATTENDEE")
  MERGE_ATTENDANCE_POOLS   @map("MERGE_ATTENDANCE_POOLS")
  VERIFY_PAYMENT           @map("VERIFY_PAYMENT")
  VERIFY_FEEDBACK_ANSWERED @map("VERIFY_FEEDBACK_ANSWERED")

  @@map("task_type")
}

enum TaskStatus {
  PENDING   @map("PENDING")
  RUNNING   @map("RUNNING")
  COMPLETED @map("COMPLETED")
  FAILED    @map("FAILED")
  CANCELED  @map("CANCELED")

  @@map("task_status")
}

model Task {
  id              String          @id @default(uuid())
  type            TaskType
  status          TaskStatus      @default(PENDING)
  payload         Json            @default("{}")
  createdAt       DateTime        @default(now()) @db.Timestamptz(3)
  scheduledAt     DateTime        @db.Timestamptz(3)
  processedAt     DateTime?       @db.Timestamptz(3)
  recurringTask   RecurringTask?  @relation(fields: [recurringTaskId], references: [id], onDelete: SetNull)
  recurringTaskId String?

  @@index([scheduledAt, status], name: "idx_job_scheduled_at_status")
  @@map("task")
}

model RecurringTask {
  id          String     @id @default(uuid())
  type        TaskType
  payload     Json       @default("{}")
  createdAt   DateTime   @default(now()) @db.Timestamptz(3)
  schedule    String
  lastRunAt   DateTime?  @db.Timestamptz(3)
  nextRunAt   DateTime   @db.Timestamptz(3)

  tasks       Task[]

  @@index([nextRunAt])
  @@map("recurring_task")
}

enum FeedbackQuestionType {
  TEXT        @map("TEXT")
  LONGTEXT    @map("LONGTEXT")
  RATING      @map("RATING")
  CHECKBOX    @map("CHECKBOX")
  SELECT      @map("SELECT")
  MULTISELECT @map("MULTISELECT")

  @@map("feedback_question_type")
}

model FeedbackForm {
  id                 String   @id @default(uuid())
  eventId            String   @unique
  event              Event    @relation(fields: [eventId], references: [id])
  isActive           Boolean  @default(false)
  publicResultsToken String   @unique @default(uuid())
  createdAt          DateTime @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime @default(now()) @updatedAt @db.Timestamptz(3)
  answerDeadline     DateTime @db.Timestamptz(3)

  questions FeedbackQuestion[]
  answers   FeedbackFormAnswer[]

  @@map("feedback_form")
}

model FeedbackQuestion {
  id                  String               @id @default(uuid())
  feedbackFormId      String
  feedbackForm        FeedbackForm         @relation(fields: [feedbackFormId], references: [id], onDelete: Cascade)
  label               String
  required            Boolean              @default(false)
  showInPublicResults Boolean              @default(true)
  type                FeedbackQuestionType
  order               Int
  createdAt           DateTime             @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime             @default(now()) @updatedAt @db.Timestamptz(3)

  options FeedbackQuestionOption[]
  answers FeedbackQuestionAnswer[] @relation("QuestionAnswers")

  @@map("feedback_question")
}

model FeedbackQuestionOption {
  id         String           @id @default(uuid())
  name       String
  questionId String
  question   FeedbackQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  selectedInAnswers FeedbackQuestionAnswerOptionLink[]

  @@unique([questionId, name])
  @@map("feedback_question_option")
}

model FeedbackQuestionAnswer {
  id           String             @id @default(uuid())
  questionId   String
  question     FeedbackQuestion   @relation("QuestionAnswers", fields: [questionId], references: [id])
  formAnswerId String
  formAnswer   FeedbackFormAnswer @relation("FormAnswers", fields: [formAnswerId], references: [id], onDelete: Cascade)
  value        Json?

  selectedOptions FeedbackQuestionAnswerOptionLink[]

  @@map("feedback_question_answer")
}

model FeedbackQuestionAnswerOptionLink {
  feedbackQuestionOption   FeedbackQuestionOption @relation(fields: [feedbackQuestionOptionId], references: [id])
  feedbackQuestionOptionId String
  feedbackQuestionAnswer   FeedbackQuestionAnswer @relation(fields: [feedbackQuestionAnswerId], references: [id], onDelete: Cascade)
  feedbackQuestionAnswerId String

  @@id([feedbackQuestionOptionId, feedbackQuestionAnswerId])
  @@map("feedback_answer_option_link")
}

model FeedbackFormAnswer {
  id             String       @id @default(uuid())
  feedbackFormId String
  feedbackForm   FeedbackForm @relation(fields: [feedbackFormId], references: [id])
  attendeeId     String       @unique
  attendee       Attendee     @relation(fields: [attendeeId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime     @default(now()) @updatedAt @db.Timestamptz(3)

  answers FeedbackQuestionAnswer[] @relation("FormAnswers")

  @@map("feedback_form_answer")
}
