generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/schemas"

  useMultipleFiles = false
  createInputTypes = false
  addIncludeType   = false
  addSelectType    = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EventStatus {
  DRAFT
  PUBLIC
  DELETED

  @@map("event_status")
}

enum EventType {
  SOCIAL
  ACADEMIC
  COMPANY
  BEDPRES

  @@map("event_type")
}

enum PaymentProvider {
  STRIPE

  @@map("payment_provider")
}

enum ProductType {
  EVENT

  @@map("product_type")
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED

  @@map("payment_status")
}

enum RefundRequestStatus {
  PENDING
  APPROVED
  REJECTED

  @@map("refund_request_status")
}

enum CompanyType {
  CONSULTING
  RESEARCH
  DEVELOPMENT
  OTHER
  UNKNOWN

  @@map("company_type")
}

enum EmploymentType {
  PARTTIME
  FULLTIME
  SUMMER_INTERNSHIP
  OTHER

  @@map("employment_type")
}

enum GroupType {
  COMMITTEE
  NODECOMMITTEE
  OTHERGROUP

  @@map("group_type")
}

model OwUser {
  id          String @id
  profileSlug String @unique @default(uuid())

  privacyPermissionsId      String?             @unique
  PrivacyPermissions        PrivacyPermissions?

  notificationPermissionsId String?                  @unique
  NotificationPermissions   NotificationPermissions?

  Attendee                  Attendee[]
  Payment                   Payment[]
  RequestedRefunds          RefundRequest[]       @relation("RequestedBy")
  HandledRefunds            RefundRequest[]       @relation("HandledBy")
  PersonalMark              PersonalMark[]
  InterestGroupsMemberships InterestGroupMember[]
  GroupMemberships          GroupMember[]
  Groups                    Group[]               @relation("ContactUser")

  @@map("ow_user")
}

model Company {
  id          String         @id @default(uuid())
  createdAt   DateTime       @default(now()) @db.Timestamptz(3)
  name        String
  slug        String         @unique
  description String?
  phone       String?
  email       String?
  website     String
  location    String?
  type        CompanyType
  imageUrl    String?
  events      EventCompany[]
  JobListing  JobListing[]

  @@map("company")
}

model Group {
  id               String   @id @unique
  createdAt        DateTime @default(now()) @db.Timestamptz(3)
  name             String
  fullName         String?
  description      String
  imageUrl         String?
  shortDescription String?
  
  email         String?
  link          String?
  contactUserId String?
  contactUser   OwUser? @relation("ContactUser", fields: [contactUserId], references: [id])

  events  EventHostingGroup[]
  type    GroupType
  members GroupMember[]

  leaderRoleName   String           @default("Leder")
  leaderRole       GroupMemberRole  @relation("LeaderRole", fields: [id, leaderRoleName], references: [groupId, name])
  punisherRoleName String?
  punisherRole     GroupMemberRole? @relation("PunisherRole", fields: [id, punisherRoleName], references: [groupId, name])

  @@unique([id, leaderRoleName])
  @@unique([id, punisherRoleName])
  @@map("group")
}

model GroupMember {
  groupId String
  group   Group  @relation(fields: [groupId], references: [id])

  userId String
  user   OwUser @relation(fields: [userId], references: [id])

  createdAt DateTime            @default(now()) @db.Timestamptz(3)
  active    Boolean             @default(true)
  periods   GroupMemberPeriod[]

  @@id([groupId, userId])
  @@map("group_member")
}

model GroupMemberPeriod {
  id String @id @default(uuid())

  groupId     String
  userId      String
  groupMember GroupMember @relation(fields: [groupId, userId], references: [groupId, userId])

  startedAt DateTime  @default(now()) @db.Timestamptz(3)
  endedAt   DateTime? @db.Timestamptz(3)

  roles GroupMemberPeriodRole[]

  @@map("group_member_period")
}

model GroupMemberPeriodRole {
  periodId String
  period   GroupMemberPeriod @relation(fields: [periodId], references: [id])
  groupId  String
  roleName String
  role     GroupMemberRole   @relation(fields: [groupId, roleName], references: [groupId, name])

  @@id([periodId, groupId, roleName])
  @@map("group_member_period_role")
}

model GroupMemberRole {
  groupId String
  name    String

  leaderIn   Group? @relation("LeaderRole")
  punisherIn Group? @relation("PunisherRole")

  groupMemberPeriods GroupMemberPeriodRole[]

  @@id([groupId, name])
  @@map("group_member_role")
}

model Attendance {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  registerStart      DateTime @db.Timestamptz(3)
  deregisterDeadline DateTime @db.Timestamptz(3)
  registerEnd        DateTime @db.Timestamptz(3)

  selections Json @default("[]")

  pools     AttendancePool[]
  attendees Attendee[]

  events Event[]

  @@map("attendance")
}

model AttendancePool {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  attendance   Attendance @relation(fields: [attendanceId], references: [id])
  attendanceId String

  title String

  mergeDelayHours Int?
  yearCriteria    Json
  capacity        Int

  attendees Attendee[]

  @@map("attendance_pool")
}

model Attendee {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  attendance   Attendance @relation(fields: [attendanceId], references: [id])
  attendanceId String

  user   OwUser @relation(fields: [userId], references: [id])
  userId String

  attendancePool   AttendancePool @relation(fields: [attendancePoolId], references: [id])
  attendancePoolId String

  feedbackFormAnswer FeedbackFormAnswer?

  /// Which options the user has selected from the Attendance selections
  selections Json @default("[]")

  /// To preserve the user's grade at the time of registration
  userGrade Int?

  reserved Boolean
  attended Boolean @default(false)

  reserveTime DateTime @db.Timestamptz(3)

  @@unique([attendanceId, userId], name: "attendee_unique")
  @@map("attendee")
}

model Event {
  id              String               @id @default(uuid())
  createdAt       DateTime             @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime             @updatedAt @db.Timestamptz(3)
  title           String
  start           DateTime             @db.Timestamptz(3)
  end             DateTime             @db.Timestamptz(3)
  status          EventStatus
  public          Boolean
  description     String?
  subtitle        String?
  imageUrl        String?
  locationTitle   String
  locationAddress String?
  locationLink    String?
  attendance      Attendance?          @relation(fields: [attendanceId], references: [id])
  attendanceId    String?
  type            EventType
  companies       EventCompany[]
  hostingGroups   EventHostingGroup[]
  interestGroups  EventInterestGroup[]
  feedbackForm    FeedbackForm?

  @@map("event")
}

model EventCompany {
  eventId   String
  companyId String
  event     Event   @relation(fields: [eventId], references: [id])
  company   Company @relation(fields: [companyId], references: [id])

  @@id([eventId, companyId])
  @@map("event_company")
}

model Mark {
  id        String         @id @default(uuid())
  title     String
  updatedAt DateTime       @updatedAt @db.Timestamptz(3)
  createdAt DateTime       @default(now()) @db.Timestamptz(3)
  category  String
  details   String?
  duration  Int
  users     PersonalMark[]

  @@map("mark")
}

model PersonalMark {
  mark   Mark   @relation(fields: [markId], references: [id])
  markId String
  user   OwUser @relation(fields: [userId], references: [id])
  userId String

  @@id([markId, userId])
  @@map("personal_mark")
}

model Product {
  id                     String                   @id @default(uuid())
  createdAt              DateTime                 @default(now()) @db.Timestamptz(3)
  updatedAt              DateTime                 @updatedAt @db.Timestamptz(3)
  type                   ProductType
  objectId               String?                  @unique
  amount                 Int
  deletedAt              DateTime?                @db.Timestamptz(3)
  isRefundable           Boolean                  @default(true)
  refundRequiresApproval Boolean                  @default(true)
  payments               Payment[]
  paymentProviders       ProductPaymentProvider[]

  @@map("product")
}

model Payment {
  id                       String         @id @default(uuid())
  createdAt                DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt                DateTime       @updatedAt @db.Timestamptz(3)
  product                  Product        @relation(fields: [productId], references: [id])
  productId                String
  user                     OwUser         @relation(fields: [userId], references: [id])
  userId                   String
  paymentProviderId        String
  paymentProviderSessionId String
  paymentProviderOrderId   String?
  status                   PaymentStatus
  refundRequest            RefundRequest?

  @@map("payment")
}

model ProductPaymentProvider {
  product           Product         @relation(fields: [productId], references: [id])
  productId         String
  paymentProvider   PaymentProvider
  paymentProviderId String

  @@id([productId, paymentProviderId])
  @@map("product_payment_provider")
}

model RefundRequest {
  id          String              @id @default(uuid())
  createdAt   DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime            @updatedAt @db.Timestamptz(3)
  payment     Payment             @relation(fields: [paymentId], references: [id])
  paymentId   String              @unique
  user        OwUser              @relation("RequestedBy", fields: [userId], references: [id])
  userId      String
  reason      String
  status      RefundRequestStatus @default(PENDING)
  handledBy   OwUser?             @relation("HandledBy", fields: [handledById], references: [id])
  handledById String?

  @@map("refund_request")
}

model PrivacyPermissions {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime @updatedAt @db.Timestamptz(3)
  user              OwUser   @relation(fields: [userId], references: [id])
  userId            String   @unique
  profileVisible    Boolean  @default(true)
  usernameVisible   Boolean  @default(true)
  emailVisible      Boolean  @default(false)
  phoneVisible      Boolean  @default(false)
  addressVisible    Boolean  @default(false)
  attendanceVisible Boolean  @default(false)

  @@map("privacy_permissions")
}

model NotificationPermissions {
  id                          String   @id @default(uuid())
  createdAt                   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt                   DateTime @updatedAt @db.Timestamptz(3)
  user                        OwUser   @relation(fields: [userId], references: [id])
  userId                      String   @unique
  applications                Boolean  @default(true)
  newArticles                 Boolean  @default(true)
  standardNotifications       Boolean  @default(true)
  groupMessages               Boolean  @default(true)
  markRulesUpdates            Boolean  @default(true)
  receipts                    Boolean  @default(true)
  registrationByAdministrator Boolean  @default(true)
  registrationStart           Boolean  @default(true)

  @@map("notification_permissions")
}

model EventHostingGroup {
  groupId String
  eventId String
  group   Group  @relation(fields: [groupId], references: [id])
  event   Event  @relation(fields: [eventId], references: [id])

  @@id([groupId, eventId])
  @@map("event_hosting_group")
}

model JobListing {
  id               String               @id @default(uuid())
  createdAt        DateTime             @default(now()) @db.Timestamptz(3)
  company          Company              @relation(fields: [companyId], references: [id])
  companyId        String
  title            String
  ingress          String
  description      String
  start            DateTime             @db.Timestamptz(3)
  end              DateTime             @db.Timestamptz(3)
  featured         Boolean
  hidden           Boolean
  deadline         DateTime?            @db.Timestamptz(3)
  employment       EmploymentType
  applicationLink  String?
  applicationEmail String?
  deadlineAsap     Boolean
  locations        JobListingLocation[]

  @@map("job_listing")
}

model JobListingLocation {
  name         String
  createdAt    DateTime   @default(now()) @db.Timestamptz(3)
  jobListing   JobListing @relation(fields: [jobListingId], references: [id])
  jobListingId String

  @@id([name, jobListingId])
  @@map("job_listing_location")
}

model Offline {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  title     String
  published DateTime @db.Timestamptz(3)
  fileUrl   String?
  imageUrl  String?

  @@map("offline")
}

model Article {
  id           String           @id @default(uuid())
  createdAt    DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime         @updatedAt @db.Timestamptz(3)
  title        String
  author       String
  photographer String
  imageUrl     String
  slug         String           @unique
  excerpt      String
  content      String
  isFeatured   Boolean          @default(false)
  vimeoId      String?
  tags         ArticleTagLink[]

  @@map("article")
}

model ArticleTag {
  name     String           @id
  articles ArticleTagLink[]

  @@map("article_tag")
}

model ArticleTagLink {
  article   Article    @relation(fields: [articleId], references: [id])
  articleId String
  tag       ArticleTag @relation(fields: [tagName], references: [name])
  tagName   String

  @@id([articleId, tagName])
  @@map("article_tag_link")
}

model InterestGroup {
  id              String                @id @default(uuid())
  createdAt       DateTime              @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime              @updatedAt @db.Timestamptz(3)
  name            String
  description     String
  link            String?
  isActive        Boolean               @default(true)
  longDescription String?
  joinInfo        String?
  imageUrl        String?
  members         InterestGroupMember[]
  events          EventInterestGroup[]

  @@map("interest_group")
}

model InterestGroupMember {
  interestGroupId String
  interestGroup   InterestGroup @relation(fields: [interestGroupId], references: [id])

  userId String
  user   OwUser @relation(fields: [userId], references: [id])

  @@id([interestGroupId, userId])
  @@map("interest_group_member")
}

model EventInterestGroup {
  eventId         String
  interestGroupId String
  event           Event         @relation(fields: [eventId], references: [id])
  interestGroup   InterestGroup @relation(fields: [interestGroupId], references: [id])

  @@id([eventId, interestGroupId])
  @@map("event_interest_group")
}

enum TaskKind {
  ATTEMPT_RESERVE_ATTENDEE
  MERGE_POOLS

  // The table is called job_name for legacy reasons.
  @@map("job_name")
}

enum TaskStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELED

  // The table is called job_status for legacy reasons.
  @@map("job_status")
}

model Task {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now()) @db.Timestamptz(3)
  scheduledAt DateTime   @db.Timestamptz(3)
  processedAt DateTime?  @db.Timestamptz(3)
  // The field is called name for legacy reasons.
  kind        TaskKind   @map("name")
  status      TaskStatus @default(PENDING)
  payload     Json       @default("{}")

  @@index([scheduledAt, status], name: "idx_job_scheduled_at_status")
  // The table is called job for legacy reasons.
  @@map("job")
}

enum FeedbackQuestionType {
  TEXT
  LONGTEXT
  RATING
  CHECKBOX
  SELECT
  MULTISELECT

  @@map("feedback_question_type")
}

model FeedbackForm {
  id        String               @id @default(uuid())
  createdAt DateTime             @default(now()) @db.Timestamptz(3)
  updatedAt DateTime             @updatedAt @db.Timestamptz(3)
  eventId   String               @unique
  event     Event                @relation(fields: [eventId], references: [id])
  questions FeedbackQuestion[]
  answers   FeedbackFormAnswer[]
  isActive  Boolean              @default(false)
  publicResultsToken  String     @unique @default(uuid())

  @@map("feedback_form")
}

model FeedbackQuestion {
  id                   String                   @id @default(uuid())
  createdAt            DateTime                 @default(now()) @db.Timestamptz(3)
  updatedAt            DateTime                 @updatedAt @db.Timestamptz(3)
  feedbackFormId       String
  feedbackForm         FeedbackForm             @relation(fields: [feedbackFormId], references: [id], onDelete: Cascade)
  label                String
  required             Boolean                  @default(false)
  showInPublicResults  Boolean                  @default(true)
  type                 FeedbackQuestionType
  order                Int
  options              FeedbackQuestionOption[]
  answers              FeedbackQuestionAnswer[] @relation("QuestionAnswers")

  @@map("feedback_question")
}

model FeedbackQuestionOption {
  id                String                             @id @default(uuid())
  name              String
  questionId        String
  question          FeedbackQuestion                   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedInAnswers FeedbackQuestionAnswerOptionLink[]

  @@unique([questionId, name])
  @@map("feedback_question_option")
}

model FeedbackQuestionAnswer {
  id              String                             @id @default(uuid())
  questionId      String
  question        FeedbackQuestion                   @relation("QuestionAnswers", fields: [questionId], references: [id])
  formAnswerId    String
  formAnswer      FeedbackFormAnswer                 @relation("FormAnswers", fields: [formAnswerId], references: [id], onDelete: Cascade)
  value           Json?
  selectedOptions FeedbackQuestionAnswerOptionLink[]

  @@map("feedback_question_answer")
}

model FeedbackQuestionAnswerOptionLink {
  feedbackQuestionOption   FeedbackQuestionOption @relation(fields: [feedbackQuestionOptionId], references: [id])
  feedbackQuestionOptionId String
  feedbackQuestionAnswer   FeedbackQuestionAnswer @relation(fields: [feedbackQuestionAnswerId], references: [id], onDelete: Cascade)
  feedbackQuestionAnswerId String

  @@id([feedbackQuestionOptionId, feedbackQuestionAnswerId])
  @@map("feedback_answer_option_link")
}

model FeedbackFormAnswer {
  id             String                   @id @default(uuid())
  createdAt      DateTime                 @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime                 @updatedAt @db.Timestamptz(3)
  feedbackFormId String
  feedbackForm   FeedbackForm             @relation(fields: [feedbackFormId], references: [id])
  answers        FeedbackQuestionAnswer[] @relation("FormAnswers")
  attendeeId     String                   @unique
  attendee       Attendee                 @relation(fields: [attendeeId], references: [id], onDelete: Cascade)

  @@map("feedback_form_answer")
}
