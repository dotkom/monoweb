import { sql } from "kysely"
import { createTableWithDefaults } from "../utils.js"

/** @param db {import('kysely').Kysely} */
export async function up(db) {
  await db.schema
    .createTable("ow_user")
    .addColumn("id", sql`text`, (col) => col.unique().notNull())
    .execute()

  await createTableWithDefaults("company", { id: true, createdAt: true }, db.schema)
    .addColumn("name", "varchar(100)", (col) => col.notNull())
    .addColumn("description", "text", (col) => col.notNull())
    .addColumn("phone", "varchar(69)")
    .addColumn("email", "varchar(69)", (col) => col.notNull().unique())
    .addColumn("website", "varchar(100)", (col) => col.notNull())
    .addColumn("location", "varchar(100)")
    .addColumn("type", "varchar(100)")
    .addColumn("image", "text")
    .execute()
  await createTableWithDefaults("committee", { id: true, createdAt: true }, db.schema)
    .addColumn("name", "varchar(100)", (col) => col.notNull())
    .addColumn("description", "text", (col) => col.notNull().defaultTo(""))
    .addColumn("email", "text", (col) => col.notNull().defaultTo("kontakt@online.ntnu.no"))
    .addColumn("image", "text")
    .execute()

  await db.schema.createType("event_status").asEnum(["TBA", "PUBLIC", "NO_LIMIT", "ATTENDANCE"]).execute()
  await db.schema.createType("event_type").asEnum(["SOCIAL", "ACADEMIC", "COMPANY", "BEDPRES"]).execute()
  await createTableWithDefaults("attendance", { id: true, createdAt: true, updatedAt: true }, db.schema)
    .addColumn("register_start", "timestamptz", (col) => col.notNull())
    .addColumn("deregister_deadline", "timestamptz", (col) => col.notNull())
    .addColumn("register_end", "timestamptz", (col) => col.notNull())
    .addColumn("extras", "json")
    .execute()
  await createTableWithDefaults("attendance_pool", { id: true, createdAt: true, updatedAt: true }, db.schema)
    .addColumn("title", "text", (col) => col.notNull())
    .addColumn("attendance_id", sql`uuid`, (col) => col.references("attendance.id").onDelete("cascade").notNull())
    .addColumn("year_criteria", "json")
    .addColumn("capacity", "integer", (col) => col.notNull())
    .addColumn("is_visible", "boolean", (col) => col.notNull())
    .addColumn("type", "text", (col) => col.notNull())
    .execute()
  await createTableWithDefaults("waitlist_attendee", { id: true, createdAt: true, updatedAt: true }, db.schema)
    .addColumn("attendance_id", sql`uuid`, (col) => col.references("attendance.id").onDelete("cascade"))
    .addColumn("user_id", sql`text`, (col) => col.references("ow_user.id").onDelete("cascade"))
    .addColumn("position", "integer")
    .addColumn("is_punished", "boolean")
    .addColumn("registered_at", "timestamptz")
    .addColumn("study_year", "integer", (col) => col.notNull())
    .addColumn("attendance_pool_id", sql`uuid`, (col) => col.references("attendance_pool.id").onDelete("cascade"))
    .addColumn("name", "text", (col) => col.notNull())
    .execute()
  await createTableWithDefaults("attendee", { id: true, createdAt: true, updatedAt: true }, db.schema)
    .addColumn("attendance_id", sql`uuid`, (col) => col.references("attendance.id").onDelete("cascade").notNull())
    .addColumn("user_id", sql`text`, (col) => col.references("ow_user.id").onDelete("cascade").notNull())
    .addColumn("attendance_pool_id", sql`uuid`, (col) =>
      col.references("attendance_pool.id").onDelete("cascade").notNull()
    )
    .addColumn("registered_at", "timestamptz", (col) => col.notNull())
    .addColumn("extras_choices", "json")
    .addColumn("attended", "boolean", (col) => col.notNull().defaultTo(false))
    .addUniqueConstraint("attendee_unique", ["attendance_id", "user_id"])
    .execute()
  await createTableWithDefaults("event", { id: true, createdAt: true, updatedAt: true }, db.schema)
    .addColumn("title", "varchar(255)", (col) => col.notNull())
    .addColumn("start", "timestamptz", (col) => col.notNull())
    .addColumn("end", "timestamptz", (col) => col.notNull())
    .addColumn("status", sql`event_status`, (col) => col.notNull())
    .addColumn("public", "boolean", (col) => col.notNull())
    .addColumn("description", "text")
    .addColumn("subtitle", "varchar(255)")
    .addColumn("image_url", "varchar(255)")
    .addColumn("location_title", "varchar(255)", (col) => col.notNull())
    .addColumn("location_address", "varchar(255)")
    .addColumn("location_link", "text")
    .addColumn("attendance_id", sql`uuid`, (col) => col.references("attendance.id").onDelete("cascade"))
    .addColumn("type", sql`event_type`, (col) => col.notNull())
    .execute()
  await createTableWithDefaults("event_company", {}, db.schema)
    .addColumn("event_id", sql`uuid`, (col) => col.references("event.id").onDelete("cascade"))
    .addColumn("company_id", sql`uuid`, (col) => col.references("company.id").onDelete("cascade"))
    .addPrimaryKeyConstraint("event_company_pk", ["event_id", "company_id"])
    .execute()

  await createTableWithDefaults("mark", { id: true, createdAt: false, updatedAt: true }, db.schema)
    .addColumn("title", "varchar(255)", (col) => col.notNull())
    .addColumn("created_at", "timestamptz", (col) => col.notNull())
    .addColumn("category", "varchar(255)", (col) => col.notNull())
    .addColumn("details", "text")
    .addColumn("duration", "integer", (col) => col.notNull())
    .execute()
  await db.schema
    .createTable("personal_mark")
    .addColumn("mark_id", sql`uuid`, (col) => col.references("mark.id").onDelete("cascade"))
    .addColumn("user_id", sql`text`, (col) => col.references("owUser.id").onDelete("cascade"))
    .addPrimaryKeyConstraint("personal_mark_pk", ["mark_id", "user_id"])
    .execute()

  await db.schema.createType("payment_provider").asEnum(["STRIPE"]).execute()
  await db.schema.createType("product_type").asEnum(["EVENT"]).execute()
  await db.schema.createType("payment_status").asEnum(["UNPAID", "PAID", "REFUNDED"]).execute()

  await createTableWithDefaults("product", { id: true, createdAt: true, updatedAt: true }, db.schema)
    .addColumn("type", sql`product_type`, (col) => col.notNull())
    .addColumn("object_id", sql`uuid`, (col) => col.unique())
    .addColumn("amount", "integer", (col) => col.notNull())
    .addColumn("deleted_at", "timestamptz")
    .addColumn("is_refundable", "boolean", (col) => col.notNull().defaultTo(true))
    .addColumn("refund_requires_approval", "boolean", (col) => col.notNull().defaultTo(true))
    .execute()
  await createTableWithDefaults("payment", { id: true, createdAt: true, updatedAt: true }, db.schema)
    .addColumn("product_id", sql`uuid`, (col) => col.references("product.id").onDelete("cascade"))
    .addColumn("user_id", sql`text`, (col) => col.references("ow_user.id").onDelete("cascade")) // change to varchar(255) when anhkha fixes user:))))
    .addColumn("payment_provider_id", "varchar(255)", (col) => col.notNull())
    .addColumn("payment_provider_session_id", "varchar(255)", (col) => col.notNull())
    .addColumn("payment_provider_order_id", "text")
    .addColumn("status", sql`payment_status`, (col) => col.notNull())
    .execute()
  await db.schema
    .createTable("product_payment_provider")
    .addColumn("product_id", sql`uuid`, (col) => col.references("product.id").onDelete("cascade"))
    .addColumn("payment_provider", sql`payment_provider`, (col) => col.notNull())
    .addColumn("payment_provider_id", "varchar(255)", (col) => col.notNull())
    .addPrimaryKeyConstraint("product_payment_provider_pk", ["product_id", "payment_provider_id"])
    .execute()

  await db.schema.createType("refund_request_status").asEnum(["PENDING", "APPROVED", "REJECTED"]).execute()
  await createTableWithDefaults("refund_request", { id: true, createdAt: true, updatedAt: true }, db.schema)
    .addColumn("payment_id", sql`uuid`, (col) => col.unique().references("payment.id").onDelete("cascade"))
    .addColumn("user_id", sql`text`, (col) => col.references("ow_user.id").onDelete("cascade"))
    .addColumn("reason", "text", (col) => col.notNull())
    .addColumn("status", sql`refund_request_status`, (col) => col.notNull().defaultTo("PENDING"))
    .addColumn("handled_by", sql`text`, (col) => col.references("ow_user.id").onDelete("cascade"))
    .execute()

  await createTableWithDefaults("privacy_permissions", { createdAt: true, updatedAt: true }, db.schema)
    .addColumn("user_id", sql`text`, (col) => col.notNull().unique().references("ow_user.id").onDelete("cascade"))
    .addColumn("profile_visible", "boolean", (col) => col.notNull().defaultTo(true))
    .addColumn("username_visible", "boolean", (col) => col.notNull().defaultTo(true))
    .addColumn("email_visible", "boolean", (col) => col.notNull().defaultTo(false))
    .addColumn("phone_visible", "boolean", (col) => col.notNull().defaultTo(false))
    .addColumn("address_visible", "boolean", (col) => col.notNull().defaultTo(false))
    .addColumn("attendance_visible", "boolean", (col) => col.notNull().defaultTo(false))
    .execute()

  await createTableWithDefaults("notification_permissions", { createdAt: true, updatedAt: true }, db.schema)
    .addColumn("user_id", sql`text`, (col) => col.notNull().unique().references("ow_user.id").onDelete("cascade"))
    .addColumn("applications", "boolean", (col) => col.notNull().defaultTo(true))
    .addColumn("new_articles", "boolean", (col) => col.notNull().defaultTo(true))
    .addColumn("standard_notifications", "boolean", (col) => col.notNull().defaultTo(true))
    .addColumn("group_messages", "boolean", (col) => col.notNull().defaultTo(true))
    .addColumn("markRules_updates", "boolean", (col) => col.notNull().defaultTo(true))
    .addColumn("receipts", "boolean", (col) => col.notNull().defaultTo(true))
    .addColumn("registration_by_administrator", "boolean", (col) => col.notNull().defaultTo(true))
    .addColumn("registration_start", "boolean", (col) => col.notNull().defaultTo(true))
    .execute()

  await db.schema
    .createTable("event_committee")
    .addColumn("committee_id", sql`uuid`, (col) => col.references("committee.id").onDelete("cascade"))
    .addColumn("event_id", sql`uuid`, (col) => col.references("event.id").onDelete("cascade"))
    .addPrimaryKeyConstraint("event_committee_pk", ["committee_id", "event_id"])
    .execute()

  await createTableWithDefaults("job_listing", { id: true, createdAt: true }, db.schema)
    .addColumn("company_id", sql`uuid`, (col) => col.references("company.id").onDelete("cascade"))
    .addColumn("title", sql`character varying(100)`, (col) => col.notNull())
    .addColumn("ingress", sql`text`, (col) => col.notNull())
    .addColumn("description", sql`text`, (col) => col.notNull())
    .addColumn("start", sql`timestamp with time zone`, (col) => col.notNull())
    .addColumn("end", sql`timestamp with time zone`, (col) => col.notNull())
    .addColumn("featured", sql`boolean`, (col) => col.notNull())
    .addColumn("deadline", sql`timestamp with time zone`)
    .addColumn("employment", sql`character varying(100)`, (col) => col.notNull())
    .addColumn("application_link", sql`character varying(200)`)
    .addColumn("application_email", sql`character varying(254)`)
    .addColumn("deadline_asap", sql`boolean`, (col) => col.notNull())
    .execute()

  await createTableWithDefaults("job_listing_location", { id: true, createdAt: true }, db.schema)
    .addColumn("name", sql`text`, (col) => col.notNull().unique())
    .execute()

  await createTableWithDefaults("job_listing_location_link", { id: true, createdAt: true }, db.schema)
    .addColumn("job_listing_id", sql`uuid`, (col) => col.references("job_listing.id").onDelete("cascade"))
    .addColumn("location_id", sql`uuid`, (col) => col.references("job_listing_location.id").onDelete("cascade"))
    .execute()

  await createTableWithDefaults("offline", { id: true, createdAt: true, updatedAt: true }, db.schema)
    .addColumn("title", sql`text`, (col) => col.notNull())
    .addColumn("published", sql`timestamptz`, (col) => col.notNull())
    .addColumn("file_url", sql`text`)
    .addColumn("image_url", sql`text`)
    .execute()

  await createTableWithDefaults("articles", { id: true, createdAt: true, updatedAt: true }, db.schema)
    .addColumn("title", "text", (col) => col.notNull())
    .addColumn("author", "text", (col) => col.notNull())
    .addColumn("photographer", "text", (col) => col.notNull())
    .addColumn("image_url", "text", (col) => col.notNull())
    .addColumn("slug", "text", (col) => col.notNull().unique())
    .addColumn("excerpt", "text", (col) => col.notNull())
    .addColumn("content", "text", (col) => col.notNull())
    .execute()
  await db.schema
    .createTable("article_tags")
    .addColumn("name", "text", (col) => col.primaryKey())
    .execute()
  await db.schema
    .createTable("article_tag_link")
    .addColumn("article", sql`uuid`, (col) => col.references("articles.id").notNull())
    .addColumn("tag", "text", (col) => col.references("article_tags.name").notNull())
    .execute()

  await createTableWithDefaults("interest_group", { id: true, createdAt: true, updatedAt: true }, db.schema)
    .addColumn("name", sql`text`, (col) => col.notNull())
    .addColumn("description", sql`text`, (col) => col.notNull())
    .addColumn("link", sql`text`)
    .addColumn("isActive", sql`boolean`, (col) => col.notNull().defaultTo(true))
    .addColumn("long_description", sql`text`, (col) => col.notNull().defaultTo(""))
    .addColumn("join_info", sql`text`, (col) => col.notNull().defaultTo(""))
    .execute()
}

/** @param db {import('kysely').Kysely} */
export async function down(db) {
  await db.schema.dropTable("interest_group").execute()

  await db.schema.dropTable("article_tag_link").execute()
  await db.schema.dropTable("article_tags").execute()
  await db.schema.dropTable("articles").execute()

  await db.schema.dropTable("offline").execute()

  await db.schema.dropTable("job_listing_location_link").execute()
  await db.schema.dropTable("job_listing_location").execute()
  await db.schema.dropTable("job_listing").execute()

  await db.schema.dropTable("event_committee").execute()

  await db.schema.dropTable("notification_permissions").execute()

  await db.schema.dropTable("privacy_permissions").execute()

  await db.schema.dropTable("refund_request").execute()
  await db.schema.dropType("refund_request_status").execute()

  await db.schema.dropTable("product_payment_provider").execute()
  await db.schema.dropTable("payment").execute()
  await db.schema.dropTable("product").execute()
  await db.schema.dropType("payment_provider").execute()
  await db.schema.dropType("product_type").execute()
  await db.schema.dropType("payment_status").execute()

  await db.schema.dropTable("personal_mark").execute()
  await db.schema.dropTable("mark").execute()

  await db.schema.dropTable("event_company").execute()
  await db.schema.dropTable("event").execute()
  await db.schema.dropTable("attendee").execute()
  await db.schema.dropTable("waitlist_attendee").execute()
  await db.schema.dropTable("attendance_pool").execute()
  await db.schema.dropTable("attendance").execute()
  await db.schema.dropType("event_status").execute()
  await db.schema.dropType("event_type").execute()

  await db.schema.dropTable("committee").execute()
  await db.schema.dropTable("company").execute()

  await db.schema.dropTable("ow_user").execute()
}
