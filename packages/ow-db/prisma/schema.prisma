// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  firstName     String?   @map("first_name")
  lastName      String?   @map("last_name")
  email         String?   @unique
  createdAt     DateTime  @default(now()) @map("created_at")
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userID            String
  type              String
  provider          String
  providerAccountID String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token") @db.Text
  accessToken       String? @map("access_token") @db.Text
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token") @db.Text
  sessionState      String? @map("session_state")

  user User @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountID])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id          String  @id @default(uuid())
  name        String
  description String
  phone       String?
  email       String @unique
  website     String
  location    String?
  type        String?
  events      Event[] @relation("CompanyEvents")
}

enum EventStatus {
  Private @map("private")
  Public  @map("public")
}

model Committee {
  id    String  @id @default(uuid()) @map("id")
  name  String  @map("name")
  Event Event[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Event {
  id          String      @id @default(uuid()) @map("id")
  title       String      @map("title")
  subtitle    String?     @map("subtitle")
  description String?     @map("description")
  imageUrl    String?     @map("image_url")
  location    String?     @map("location")
  start       DateTime    @map("start")
  end         DateTime    @map("end")
  public      Boolean     @map("public")
  status      EventStatus @map("status")
  companies   Company[]   @relation("CompanyEvents")
  organizer   Committee   @relation(fields: [organizerId], references: [id])
  organizerId String      @map("organizer_id")

  attendances Attendance[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Attendance {
  id                 String     @id @default(uuid()) @map("id")
  event              Event      @relation(fields: [eventId], references: [id])
  eventId            String     @map("event_id")
  start              DateTime   @map("start")
  end                DateTime   @map("end")
  deregisterDeadline DateTime   @map("deregister_deadline")
  limit              Int        @default(0) @map("limit")
  // criteria Criteria[]
  attendees          Attendee[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Attendee {
  id           String     @id @default(uuid()) @map("id")
  attendance   Attendance @relation(fields: [attendanceId], references: [id])
  attendanceId String     @map("attendanceId")
  eventId      String     @map("event_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique(fields: [attendanceId, eventId])
}
